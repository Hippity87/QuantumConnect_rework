@page "/weather"
@using QuantumConnect.BlazorApp.Components.WeatherDashboard
@inject HttpClient Http

<h2><Blazorise.Icon Name="IconName.Cloud" /> Weather Dashboard</h2>

<div class="mb-3 d-flex gap-2">
    <button class="btn btn-outline-light" disabled>Day</button>
    <button class="btn btn-outline-light" disabled>Week</button>
    <button class="btn btn-outline-light" disabled>Month</button>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <ChartCard Config="_tempConfig" Data="_latestData" Labels="_labels" />
    </div>
    <div class="col-md-6">
        <ChartCard Config="_humConfig" Data="_latestData" Labels="_labels" />
    </div>
</div>

@code {
    private readonly IChartConfig _tempConfig = new TemperatureChartConfig();
    private readonly IChartConfig _humConfig = new HumidityChartConfig();

    private List<SensorData> _latestData = new();
    private List<string> _labels = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
        _ = StartPolling();
    }

    async Task StartPolling()
    {
        while (true)
        {
            await Task.Delay(5 * 60 * 1000); // Päivitä 5min välein
            await FetchData();
        }
    }

    async Task FetchData()
    {

        // Hae tarpeeksi monta riviä!
        var data = await Http.GetFromJsonAsync<List<SensorData>>("/api/SensorData?lastN=500");
        if (data is null || data.Count == 0)
            return;

        Console.WriteLine($"APIsta tuli {data.Count} riviä");
        // Järjestä aikajärjestykseen
        data = data.OrderBy(d => d.Timestamp).ToList();

        // Ota viimeiset 24 (esim. viimeisen vuorokauden ajalta) — tee tämä niin että vanhin ensin!
        var latest = data.TakeLast(24).ToList();

        _latestData = latest;
        _labels = latest.Select(d => d.Timestamp.ToLocalTime().ToString("HH:mm")).ToList();


        StateHasChanged();
        Console.WriteLine($"latest.Count = {latest.Count}, labels.Count = {_labels.Count}");

    }
}
